import click

from config.config import SessionLocal
from services.user_service import UserService
from repositories.user_repository import UserRepository
from utils.utils import ROLE_MAPPING, is_email_valid, is_password_valid


db_session = SessionLocal()

# Cr√©ation des objets services
user_repo = UserRepository(db_session)
user_service = UserService(user_repo)


@click.group(name='user')
def user_group():
    pass


# Commande pour cr√©er un utilisateur
@user_group.command()
def create():
    """Cr√©e un nouvel utilisateur dans le CRM."""

    # Demande le nom complet
    full_name = click.prompt('Nom complet de l\'utilisateur')

    # Demande et v√©rifie l'adresse email
    while True:
        email = click.prompt('Email de l\'utilisateur')
        if not is_email_valid(email):
            click.echo(f"‚ùå Erreur : L'email '{email}' est invalide.")
        else:
            break

    # Demande et v√©rifie le mot de passe
    while True:
        password = click.prompt('Mot de passe de l\'utilisateur',
                                hide_input=True)
        if not is_password_valid(password):
            click.echo("‚ùå Erreur : Le mot de passe doit comporter au moins 8 "
                       "caract√®res et un chiffre")
            password = click.prompt("Veuillez entrer un mot de passe valide",
                                    hide_input=True)
        else:
            break

    # Demande et v√©rifie le r√¥le
    while True:
        role_name = click.prompt('R√¥le de l\'utilisateur')
        role_id = ROLE_MAPPING.get(role_name.lower())
        if not role_id:
            click.echo(f"‚ùå Erreur : Le r√¥le '{role_name}' est invalide. "
                       "Choisissez parmi : Gestion, Commercial, Support.")
        else:
            break

    # Confirme la cr√©ation de l'utilisateur
    confirm = click.confirm(
        f"‚ùó Confirmer la cr√©ation ? :\n"
        f"Nom : {full_name} \n"
        f"Email : {email}\n"
        f"R√¥le : {role_name}\n"
    )
    if not confirm:
        click.echo("‚ÑπÔ∏è Op√©ration annul√©e.")
        return

    # Cr√©√© l'utilisateur
    user = user_service.create_user(
        full_name=full_name,
        email=email,
        password=password,
        role_id=role_id
    )

    if isinstance(user, dict) and "error" in user:
        click.echo(f"‚ùå Erreur : {user['error']}")

    click.echo(f"‚úÖ Cr√©ation de l'utilisateur {full_name} r√©ussie.")


# Commande pour r√©cup√©rer un utilisateur par ID, email ou nom complet
@user_group.command()
@click.argument('identifier', required=False)
def get(identifier):
    """R√©cup√®re un utilisateur par ID, email ou nom complet."""

    # Si aucun argument n'est pass√©, demande √† l'utilisateur
    if not identifier:
        identifier = click.prompt(
            'Veuillez entrer un ID, un email ou un nom complet',
            type=str
        )

    # V√©rifie si l'input est un ID (entier)
    if identifier.isdigit():
        user = user_service.get_user_by_id(int(identifier))
    # V√©rifie si l'input est un email (pr√©sence du "@")
    elif "@" in identifier:
        user = user_service.get_user_by_email(identifier)
    # Sinon, consid√®re que c'est un nom complet
    else:
        users = user_service.get_user_by_name(identifier)

    # Gestion des erreurs et affichage du r√©sultat
    if isinstance(users, dict) and "error" in users:
        click.echo(f"‚ùå Erreur : {users['error']}")
    else:
        if len(users) == 1:
            user = users[0]
            click.echo(
                f"üë§ {user.full_name}\n"
                f"ID : {user.id}\n"
                f"Email : {user.email}\n"
                f"R√¥le : {user.role.name}\n"
            )
        elif len(users) > 1:
            click.echo("Plusieurs utilisateurs ont √©t√© trouv√©s :")
            for user in users:
                click.echo(
                    f"üë§ {user.full_name}\n"
                    f"ID : {user.id}\n"
                    f"Email : {user.email}\n"
                    f"R√¥le : {user.role.name}\n"
                )


# Commande pour mettre √† jour un utilisateur via son email
@user_group.command()
@click.option('--email', prompt="Email de l'utilisateur √† modifier",
              help="Email de l'utilisateur.")
def update(email):
    """Met √† jour les informations d'un utilisateur via son email"""

    # R√©cup√®re l'utilisateur si existant
    user = user_service.get_user_by_email(email)

    if user is None or (isinstance(user, dict) and "error" in user):
        click.echo("‚ùå Erreur : Utilisateur introuvable.")
        raise click.Abort()

    user_id = user.id

    click.echo(f"üë§ Utilisateur trouv√© : {user.full_name} - {user.email} - "
               f"{user.role.name}")

    # Demande les nouvelles valeurs avec les anciennes comme valeurs par d√©faut
    full_name = click.prompt("Nouveau nom complet (laisser vide pour ne pas "
                             "changer)",
                             default=user.full_name, show_default=True)
    email = click.prompt("Nouvelle adresse email (laisser vide pour ne "
                         "pas changer)", default=user.email,
                         show_default=True)
    password = click.prompt("Nouveau mot de passe (laisser vide pour ne pas "
                            "changer)", default="", hide_input=True)
    role_name = click.prompt("Nouveau r√¥le (laisser vide pour ne pas changer)",
                             default=user.role.name, show_default=True)

    role_id = ROLE_MAPPING.get(role_name.lower())

    if not role_id:
        click.echo(f"‚ùå Erreur : Le r√¥le '{role_name}' est invalide. "
                   "Choisissez parmi : gestion, commercial, support.")
        raise click.Abort()

    # Si aucun changement, annule l'op√©ration
    if (
        full_name == user.full_name
        and email == user.email
        and not password
        and int(role_id) == user.role.id
    ):
        click.echo("‚ÑπÔ∏è Aucune modification n'a √©t√© appliqu√©e")
        return

    confirm = click.confirm(
        f"‚ùó Valider les modifications suivantes ?\n"
        f"{user.full_name} => {full_name}\n"
        f"{user.email} => {email}\n"
        f"Mot de passe\n"
        f"{user.role.name} => {role_name}\n"
    )

    if not confirm:
        click.echo("‚ÑπÔ∏è Op√©ration annul√©e.")
        return

    # Applique la mise √† jour
    updated_user = user_service.update_user(
        user_id=user_id,
        full_name=full_name if full_name != user.full_name else None,
        email=email if email != user.email else None,
        password=password if password else None,
        role_id=int(role_id) if int(role_id) != user.role.id else None
    )

    if isinstance(updated_user, dict) and "error" in updated_user:
        click.echo(f"‚ùå Erreur : {updated_user['error']}")
        raise click.Abort()

    click.echo(f"‚úÖ Mise √† jour r√©ussie pour {updated_user.full_name}.")


# Commande pour supprimer un utilisateur via son email
@user_group.command()
@click.option('--email', prompt="Email de l'utilisateur √† supprimer",
              help="Email de l'utilisateur √† supprimer.")
def delete(email):
    """Supprime un utilisateur par son email."""

    # Recherche de l'utilisateur par email
    user_to_delete = user_service.get_user_by_email(email)

    if isinstance(user_to_delete, dict) and "error" in user_to_delete:
        click.echo(f"‚ùå Erreur : {user_to_delete['error']}")
        raise click.Abort()

    # Demande confirmation pour la suppression
    confirm = click.confirm(
        f"‚ùó √ätes-vous s√ªr de vouloir supprimer {user_to_delete.full_name} "
        f"({user_to_delete.email}) ?"
    )

    if not confirm:
        click.echo("‚ÑπÔ∏è Suppression annul√©e.")
        return

    # Suppression de l'utilisateur
    result = user_service.delete_user(user_to_delete.id)

    if isinstance(result, dict) and "error" in result:
        click.echo(f"‚ùå Erreur : {result['error']}")
    else:
        click.echo(f"‚úÖ L'utilisateur {user_to_delete.full_name} a √©t√© "
                   "supprim√©.")
